-- Lilac AutoFarm with Anti-AFK + Fixed Fluent UI
-- Abuse sprinkler bug safely

-- Load Fluent UI
local Fluent = loadstring(game:HttpGet("https://github.com/dawid-scripts/Fluent/releases/latest/download/main.lua"))()

local Window = Fluent:CreateWindow({
    Title = "Lilac AutoFarm",
    SubTitle = "Sprinkler Bug Abuse Script",
    TabWidth = 160,
    Size = UDim2.fromOffset(500, 300),
    Acrylic = false,
    Theme = "VSC Dark High Contrast",
    MinimizeKey = Enum.KeyCode.RightControl
})

local Tab = Window:AddTab({ Title = "Main", Icon = "leaf" })

-- Anti-AFK
local VirtualUser = game:GetService("VirtualUser")
game:GetService("Players").LocalPlayer.Idled:Connect(function()
    VirtualUser:CaptureController()
    VirtualUser:ClickButton2(Vector2.new())
    print("[Anti-AFK] Sent fake input to prevent kick.")
end)

-- Services
local collectionService = game:GetService("CollectionService")
local replicatedStorage = game:GetService("ReplicatedStorage")
local players = game:GetService("Players")
local localPlayer = players.LocalPlayer

-- Variables
local autoHarvestEnabled = false
local autoSellEnabled = false
local harvestedCount = 0

-- Get RemoteEvents
local harvestRemote = replicatedStorage:FindFirstChild("HarvestPlant_RE") or replicatedStorage.GameEvents.HarvestPlant_RE
local sellRemote = replicatedStorage:FindFirstChild("SellPlant_RE") or replicatedStorage.GameEvents.SellPlant_RE

-- Harvest function
local function HarvestPlant(plant)
    if plant:GetAttribute("PlantName") == "Lilac" and plant:GetAttribute("ReadyToHarvest") == true then
        if harvestRemote then
            harvestRemote:FireServer(plant)
            harvestedCount = harvestedCount + 1
            print("[AutoHarvest] Harvested Lilac #" .. harvestedCount)
            
            -- Auto Sell after harvest
            if autoSellEnabled and sellRemote then
                task.wait(math.random(0.3, 0.6)) -- Random delay to look human
                sellRemote:FireServer({plant})
                print("[AutoSell] Sold Lilac #" .. harvestedCount)
            end
        end
    end
end

-- Auto Harvest loop
task.spawn(function()
    while task.wait(0.5) do -- Delay between harvest loops
        if autoHarvestEnabled then
            for _, plant in pairs(collectionService:GetTagged("PlayerPlant")) do
                if plant:GetAttribute("OWNER") == localPlayer.Name then
                    HarvestPlant(plant)
                end
            end
        end
    end
end)

-- UI Controls
Tab:AddToggle("ToggleAutoHarvestLilac", {
    Title = "Auto Harvest Lilac",
    Description = "Automatically harvest 'Lilac' plants when ready.",
    Default = false
}):OnChanged(function(state)
    autoHarvestEnabled = state
    Fluent:Notify({
        Title = "Lilac AutoFarm",
        Content = "Auto Harvest is now " .. (state and "ENABLED" or "DISABLED"),
        Duration = 3
    })
    print("[UI] Auto Harvest " .. (state and "Enabled" or "Disabled"))
end)

Tab:AddToggle("ToggleAutoSellLilac", {
    Title = "Auto Sell Lilac",
    Description = "Automatically sell harvested 'Lilac' plants.",
    Default = false
}):OnChanged(function(state)
    autoSellEnabled = state
    Fluent:Notify({
        Title = "Lilac AutoFarm",
        Content = "Auto Sell is now " .. (state and "ENABLED" or "DISABLED"),
        Duration = 3
    })
    print("[UI] Auto Sell " .. (state and "Enabled" or "Disabled"))
end)

Tab:AddButton({
    Title = "Show Harvested Lilac Count",
    Description = "Shows how many 'Lilac' plants harvested so far.",
    Callback = function()
        Fluent:Notify({
            Title = "Lilac AutoFarm",
            Content = "Lilac Harvested: " .. harvestedCount,
            Duration = 4
        })
    end
})

