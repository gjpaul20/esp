-- SETTINGS:
local AUTO_HOP_ENABLED = true
local MIN_EGG_PETS_ENTRIES = 1 -- How many entries required to accept server (1+ is good)

-- AUTO-HOP UTIL:
local HttpService = game:GetService("HttpService")
local TeleportService = game:GetService("TeleportService")
local Players = game:GetService("Players")
local localPlayer = Players.LocalPlayer

local function serverHop()
    print("üîÑ Hopping to another server...")

    local PlaceId = game.PlaceId
    local url = "https://games.roblox.com/v1/games/" .. PlaceId .. "/servers/Public?sortOrder=Desc&limit=100"

    local servers = {}
    local success, response = pcall(function()
        return game:HttpGet(url)
    end)

    if success then
        local data = HttpService:JSONDecode(response)
        if data and data.data then
            for _, server in ipairs(data.data) do
                if server.playing < server.maxPlayers then
                    table.insert(servers, server.id)
                end
            end
        end
    end

    if #servers > 0 then
        local randomServerId = servers[math.random(1, #servers)]
        print("üöÄ Teleporting to server ID:", randomServerId)
        TeleportService:TeleportToPlaceInstance(PlaceId, randomServerId, localPlayer)
    else
        warn("‚ùå No servers found to hop.")
    end
end

-- EGG PETS TEST:
local eggModels = {}
local eggPets = {}

local function testEggPets()
    print("üîç Testing eggPets...")
    local success = pcall(function()
        local hatchFunc = getupvalue(getupvalue(getconnections(game:GetService("ReplicatedStorage").GameEvents.PetEggService.OnClientEvent)[1].Function, 1), 2)
        eggModels = getupvalue(hatchFunc, 1) or {}
        eggPets = getupvalue(hatchFunc, 2) or {}
    end)

    if not success then
        print("‚ùå Could not access eggPets - possibly patched.")
        return false
    end

    if type(eggPets) == "table" then
        local count = 0
        for k, v in pairs(eggPets) do count = count + 1 end
        print("‚úÖ eggPets detected! Entries: " .. count)
        if count >= MIN_EGG_PETS_ENTRIES then
            print("üéâ GOOD SERVER FOUND! You can use the ESP here!")
            return true
        else
            print("‚ö†Ô∏è eggPets is present but empty. Will hop to another server...")
            return false
        end
    else
        print("‚ùå eggPets not detected. Will hop to another server...")
        return false
    end
end

-- MAIN EXECUTION:
if AUTO_HOP_ENABLED then
    local goodServer = testEggPets()

    if not goodServer then
        -- Use queue_on_teleport to reload this same script after teleport:
        if queue_on_teleport then
            queue_on_teleport('loadstring(game:HttpGet("https://raw.githubusercontent.com/gjpaul20/esp/refs/heads/main/egg"))()')
        else
            warn("‚ö†Ô∏è Your executor does not support queue_on_teleport. Manual re-execution needed.")
        end

        task.wait(3) -- Wait a bit before hopping
        serverHop()
        return -- Stop current execution, will reload in next server
    end
end

-- REST OF YOUR ESP SCRIPT BELOW:
local Fluent = loadstring(game:HttpGet("https://github.com/dawid-scripts/Fluent/releases/latest/download/main.lua"))()

local Window = Fluent:CreateWindow({
	Title = "Pet Detector",
	SubTitle = "SkillyBetaHub Script",
	TabWidth = 160,
	Size = UDim2.fromOffset(500, 300),
	Acrylic = false,
	Theme = "VSC Dark High Contrast",
	MinimizeKey = Enum.KeyCode.RightControl
})

local Tab = Window:AddTab({ Title = "Main", Icon = "home" })

local collectionService = game:GetService("CollectionService")

local espEnabled = false
local espCache = {}
local activeEggs = {}
local addedConn, removedConn

local function getObjectFromId(objectId)
	for _, eggModel in pairs(eggModels) do
		if eggModel:GetAttribute("OBJECT_UUID") == objectId then
			return eggModel
		end
	end
end

local function CreateEspGui(object, text)
	local billboard = Instance.new("BillboardGui")
	billboard.Name = "PetEggDetector"
	billboard.Adornee = object:FindFirstChildWhichIsA("BasePart") or object.PrimaryPart or object
	billboard.Size = UDim2.new(0, 200, 0, 50)
	billboard.StudsOffset = Vector3.new(0, 2.5, 0)
	billboard.AlwaysOnTop = true

	local label = Instance.new("TextLabel")
	label.Parent = billboard
	label.Size = UDim2.new(1, 0, 1, 0)
	label.BackgroundTransparency = 1
	label.Text = text
	label.TextColor3 = Color3.new(1, 1, 1)
	label.TextStrokeTransparency = 0
	label.TextScaled = true
	label.Font = Enum.Font.SourceSansBold

	billboard.Parent = object
	return billboard
end

local function UpdateEsp(objectId, petName)
	local object = getObjectFromId(objectId)
	if not object or not espCache[objectId] then return end

	local eggName = object:GetAttribute("EggName") or "Unknown"
	local labelGui = espCache[objectId]
	if labelGui and labelGui:FindFirstChildOfClass("TextLabel") then
		labelGui.TextLabel.Text = eggName .. " | " .. (petName or "?")
	end
end

local function AddEsp(object)
	if object:GetAttribute("OWNER") ~= localPlayer.Name then return end
	local eggName = object:GetAttribute("EggName") or "Unknown"
	local petName = eggPets[object:GetAttribute("OBJECT_UUID")]
	local objectId = object:GetAttribute("OBJECT_UUID")
	if not objectId then return end

	local text = eggName .. " | " .. (petName or "?")
	local esp = CreateEspGui(object, text)
	espCache[objectId] = esp
	activeEggs[objectId] = object
end

local function RemoveEsp(object)
	if object:GetAttribute("OWNER") ~= localPlayer.Name then return end
	local objectId = object:GetAttribute("OBJECT_UUID")
	if espCache[objectId] then
		espCache[objectId]:Destroy()
		espCache[objectId] = nil
	end
	activeEggs[objectId] = nil
end

if Tab and Tab.AddToggle then
	Tab:AddToggle("PetEggDetectESP", {
		Title = "Pet Hatch Detector",
		Description = "eggs need to be ready, then server hop until you got the pet you want.",
		Default = false
	}):OnChanged(function(state)
		espEnabled = state

		if espEnabled then
			for _, object in collectionService:GetTagged("PetEggServer") do
				task.spawn(AddEsp, object)
			end

			addedConn = collectionService:GetInstanceAddedSignal("PetEggServer"):Connect(AddEsp)
			removedConn = collectionService:GetInstanceRemovedSignal("PetEggServer"):Connect(RemoveEsp)

			pcall(function()
				local conn = getconnections(game:GetService("ReplicatedStorage").GameEvents.EggReadyToHatch_RE.OnClientEvent)[1]
				if conn and typeof(conn.Function) == "function" then
					hookfunction(conn.Function, newcclosure(function(objectId, petName)
						UpdateEsp(objectId, petName)
					end))
				end
			end)
		else
			for _, gui in pairs(espCache) do
				gui:Destroy()
			end
			espCache = {}
			activeEggs = {}

			if addedConn then addedConn:Disconnect() addedConn = nil end
			if removedConn then removedConn:Disconnect() removedConn = nil end
		end
	end)
else
	warn("‚ö†Ô∏è Are you using a supported executor?")
end
